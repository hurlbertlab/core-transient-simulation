ants = antdata
knitr::opts_chunk$set(echo = TRUE)
ants$sum<-colSums(ants[2:10])	## First step, sums the ant abundances across spp - the number of columns will be different depending on the class!
head(ants)
ant = ants
## before we do anything we want to TIDY our data into a long form (fewer columns)
## let's make a new column called 'species"
ant <- gather(antdata, key = species, 4:11, value = abundance)
## before we do anything we want to TIDY our data into a long form (fewer columns)
## let's make a new column called 'species"
ants <- gather(antdata, key = species, 4:11, value = abundance)
head(ants)
levels(ants$species)
unique(ants$species)
antsums <- if (ants$species == "C.pennsylvanicus") {
sum(ants$abundance)
}
atnsums
antsums
sum(ants$abundance)
if (ants$species == "C.pennsylvanicus") {
ants[ants$species == "C.pennsylvanicus",]
sum(ants$abundance)
}
if (ants$species == "C.pennsylvanicus") {
sum(ants[ants$species == "C.pennsylvanicus",])
}
sum(ants[ants$species == "C.pennsylvanicus",])
ants[ants$species == "C.pennsylvanicus",]
sum(ants$abundance[ants$species == "C.pennsylvanicus",])
ants[ants$species == "C.pennsylvanicus",] %>%
sum(ants$abundance)
cpsub = ants[ants$species == "C.pennsylvanicus",]
sum(cpsub$abundance)
cpsub
unique(ants$species)
if (ants$species == "C.pennsylvanicus") {
cpsub = ants[ants$species == "C.pennsylvanicus",]
sum(cpsub$abundance)
} if (ants$species == "T.sessile") {
if (ants$species == "C.pennsylvanicus") {
cpsub = ants[ants$species == "C.pennsylvanicus",]
sum(cpsub$abundance)
}
if (ants$species == "T.sessile") {
tssub = ants[ants$species == "T.sessile",]
sum(tsssub$abundance)
}
View(cpsub)
if (ants$species == "C.pennsylvanicus") {
cpsub = ants[ants$species == "C.pennsylvanicus",]
cp$sum = sum(cpsub$abundance)
}
if (ants$species == "T.sessile") {
tssub = ants[ants$species == "T.sessile",]
ts$sum = sum(tsssub$abundance)
}
ants[ants$species == "T.sessile",]
if (ants$species == "T.sessile") {
tssub = ants[ants$species == "T.sessile",]
ts$sum = sum(tssub$abundance)
}
if (ants$species == "T.sessile") {
tssub = ants[ants$species == "T.sessile",]
ts$sum = sum(tssub$abundance)
}
if (ants$species == "C.pennsylvanicus") {
cpsub = ants[ants$species == "C.pennsylvanicus",]
cp$sum = sum(cpsub$abundance)
}
if (ants$species == "C.pennsylvanicus") {
cpsub = ants[ants$species == "C.pennsylvanicus",]
cpsub$sum = sum(cpsub$abundance)
}
if (ants$species == "C.pennsylvanicus") {
cpsub = ants[ants$species == "C.pennsylvanicus",]
sum(cpsub$abundance)
}
if (ants$species == "T.sessile") {
tssub = ants[ants$species == "T.sessile",]
sum(tssub$abundance)
}
tssub = ants[ants$species == "T.sessile",]
sum(tssub$abundance)
unique(ants$species)
if (ants$species == "C.pennsylvanicus") {
cpsub = ants[ants$species == "C.pennsylvanicus",]
sum(cpsub$abundance)
}
if (ants$species == "T.sessile") {
tssub = ants[ants$species == "T.sessile",]
sum(tssub$abundance)
}
if (ants$species == "C.ashmeadi") {
casub = ants[ants$species == "C.ashmeadi",]
sum(casub$abundance)
}
if (ants$species == "Pheidole") {
phsub = ants[ants$species == "Pheidole",]
sum(phsub$abundance)
}
if (ants$species == "M.minimum") {
phsub = ants[ants$species == "M.minimum",]
sum(phsub$abundance)
}
if (ants$species == "S.molesta") {
smsub = ants[ants$species == "S.molesta",]
sum(smsub$abundance)
}
if (ants$species == "F.pallidefulva") {
fpsub = ants[ants$species == "F.pallidefulva",]
sum(fpsub$abundance)
}
else{
sum(cpsub$abundance)
sum(tssub$abundance)
sum(casub$abundance)
casub = ants[ants$species == "C.ashmeadi",]
sum(casub$abundance)
phsub = ants[ants$species == "Pheidole",]
sum(phsub$abundance)
phsub = ants[ants$species == "M.minimum",]
sum(phsub$abundance)
smsub = ants[ants$species == "S.molesta",]
sum(smsub$abundance)
fpsub = ants[ants$species == "F.pallidefulva",]
sum(fpsub$abundance)
if (ants$species == "T.bicarinatum") {
tbsub = ants[ants$species == "T.bicarinatum",]
sum(tbsub$abundance)
}
sum(tbsub$abundance)
tbsub = ants[ants$species == "T.bicarinatum",]
sum(tbsub$abundance)
if (ants$species == "C.pennsylvanicus") {
cpsub = ants[ants$species == "C.pennsylvanicus",]
sum(cpsub$abundance)
}
if (ants$species == "C.pennsylvanicus") {
cpsub = ants[ants$species == "C.pennsylvanicus",]
}
sum(cpsub$abundance)
if (ants$species == "T.sessile") {
tssub = ants[ants$species == "T.sessile",]
}
sum(tssub$abundance)
if (ants$species == "C.pennsylvanicus") {
cpsub = ants[ants$species == "C.pennsylvanicus",]
}
sum(cpsub$abundance)
if (ants$species == "T.sessile") {
tssub = ants[ants$species == "T.sessile",]
}
sum(tssub$abundance)
if (ants$species == "C.pennsylvanicus") {
cpsub = ants[ants$species == "C.pennsylvanicus",]
}
sum(cpsub$abundance)
if (ants$species == "T.sessile") {
tssub = ants[ants$species == "T.sessile",]
}
sum(tssub$abundance)
if (ants$species == "C.ashmeadi") {
casub = ants[ants$species == "C.ashmeadi",]
}
sum(casub$abundance)
if (ants$species == "Pheidole") {
phsub = ants[ants$species == "Pheidole",]
}
sum(phsub$abundance)
if (ants$species == "M.minimum") {
phsub = ants[ants$species == "M.minimum",]
}
sum(phsub$abundance)
if (ants$species == "S.molesta") {
smsub = ants[ants$species == "S.molesta",]
}
sum(smsub$abundance)
if (ants$species == "F.pallidefulva") {
fpsub = ants[ants$species == "F.pallidefulva",]
}
sum(fpsub$abundance)
if (ants$species == "T.bicarinatum") {
tbsub = ants[ants$species == "T.bicarinatum",]
}
sum(tbsub$abundance)
ant_abun<-ants[5:13,] # select only rows with abundance data, you may have a different number of rows
head(ant_abun)
head(ants)
ant_abun<-ants[5,] # select only rows with abundance data, you may have a different number of rows
head(ant_abun)
ant_abun<-ants[,5] # select only rows with abundance data, you may have a different number of rows
head(ant_abun)
fac<-ant_all[,1:4]	# select only rows with factor data
fac<-ants[,1:4]	# select only rows with factor data
antmod = adonis(abundance ~ Habitat * Food + Section, data=ants, permutations=999)
library(vegan)
install.packages(vegan)
install.packages("vegan")
install.packages("vegan") 	## R will ask you which "CRAN mirror" you want to use.
f/else statements
In R, you create an if/else statement with the following syntax:
if (logical statment) { do something } else  { do something different }
```{r}
# For example:
if (TRUE)  { print("TRUE") } else { print("FALSE") }
if (FALSE) { print("TRUE") } else { print("FALSE") }
if (1 > 2) { print("TRUE") } else { print("FALSE") }
```
Not all if/else statements have to have an else clause. By default, if no else statement is given R does nothing.
```{r}
x <- 1000
if (x > 100) print("'x' is greater than 100")
```
If/else statements can also be nested:
```{r}
y <- 25
if (y < 100) {
if (y > 10) {
print("10 < y < 100")
} else {
print("y < 10 or y > 100")
}
} else {
print("y < 10 or y > 100")
}
```
Combining if/else statments
Another way to combine if/else statements is to combine the conditional statement. There are four operators for combining logical statements: &, &&, |, ||. The "and" operators (&/&&) return return TRUE if both statements are TRUE. The "or" operators (|/||) return TRUE if either statement is TRUE. The The single-character operators (& and |) return a vector.
```{r}
1 > 0 & TRUE
FALSE | 10 ## Remember from class 1 how 10 is coerced to TRUE
1 > 0 & c(TRUE, FALSE, FALSE, TRUE)
0 > 1 & c(TRUE, FALSE, FALSE, TRUE)
0 > 1 | c(TRUE, FALSE, FALSE, TRUE)
```
The double-character operators (&& and ||) will only return a single TRUE or FALSE value.
```{r}
1 > 0 && 10 < 100
1 > 0 && FALSE
1 > 0 || FALSE
1 > 0 && c(TRUE, FALSE)
1 > 0 && c(FALSE, TRUE)
```
install.packageS("ggplot2")
install.packages("ggplot2")
install.packages("vegan") 	## R will ask you which "CRAN mirror" you want to use.
######### EXP 4 TEST ############
# goal is vary dispersal and landscape similarity
# ID for this set of parameters
expID = 'EXP4'
# save colonization rates
calc_rates = TRUE
# Define number of runs, for EXP1-turn
nruns=50
# Make directory
dir.create(file.path(parm_dir, expID))
## Define dispersal parameters
# Find mean of halfnormal distribution that corresponds to P(x <= D) = 0.99 for D in {1,2,4,8,16}
find_d = function(x, p) x/(sqrt(pi)*erfinv(p)) # function that calculates mean of halfnormal under given quantile
D = find_d(2^(0:4), 0.99)
# Set of dispersal parameters
gaus = data.frame(kern='gaussian', d=D, id=paste0('g',2^(0:4)))
d_parms = gaus
rownames(d_parms) = d_parms$id
# Set spatial correlation structure parameter
vgm_dcorr = 8
# Two immigration rate scenarios (both less than 0.01 of EXP 1 and 2)
imm_rates = 0.01
# set habitat similarity parameter
hp_parms = seq(0.5, 1, by = 0.1)
# Make parameter files
for(id in d_parms$id){
# Make new parameter directory for each set of dispersal parameters
this_dir = paste('d',id, sep='-')
dir.create(file.path(expID,this_dir))
for (hp in hp_parms) {
# Set dispersal parameters
d = d_parms[id, 'd']
dist_d = list(mu=d, var=0)
d_kernel = list(type=d_parms[id, 'kern'])
dist_v = list(mu=c(0, d_parms[id,'d']), var=c(0,0))
v_kernel = list(type=d_parms[id, 'kern'])
# Set immigration
hab_sim = hp
# Set simID
simID = paste0('d-', id, '_hp-', hp)
# Write parameter file
parmlist = make_parmlist()
CTSim:::write_parms(parmlist, file.path(expID, this_dir, paste0('p_', simID, '.txt')))
}
}
getwd()
View(ants)
View(ants)
View(ants)
if TRUE {print("TRUE")} else {print ("FALSE")}
if (TRUE) {print("TRUE")} else {print ("FALSE")}
if (FALSE){
print("TRUE")
} else {
print("FALSE")
}
if (1 > 2) {
print("TRUE")
} else {
print("FALSE")
}
if(1000 > 100)  print("x greater")
if(10 > 100)  print("x greater")
y <- 25
if (y < 100){
if (y > 10) {
print("10 < y < 100")
} else{
print ("y < 10 or y > 100")
} else{
print(" y < 10 or y > 100")
}
}
if (y < 100){
if (y > 10) {
print("10 < y < 100")
} else {
print ("y < 10 or y > 100")
} else {
print(" y < 10 or y > 100")
}
}
print("y < 10 or y > 100")
ants
cpsub <- ants[ants$species == "C.pennsylvanicus",]
cpsub
sum(cpsub$abundance)
kruskal.test(abundance ~ Habitat, data = ants)
head(ants)
kruskal.test(abundance ~ Food, data = ants)
?kruskal.test
library(stats)
kruskal.test(abundance ~ Food, data = ants)
tput:
word_document: default
html_document: default
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
Class 4 expectations
Implement basic control statements in R (if/else statements)
Use the and/or operators for combining logical statements
Process data from Ant Lab
Imagine you have a large dataset and want to calculate the mean and standard deviation of one treatment. First, you would need to select the relevant treatment, then calculate the relevant statistics.
If/else statements
In R, you create an if/else statement with the following syntax:
if (logical statment) { do something } else  { do something different }
```{r}
# For example:
if (TRUE)  { print("TRUE") } else { print("FALSE") }
if (FALSE) { print("TRUE") } else { print("FALSE") }
if (1 > 2) { print("TRUE") } else { print("FALSE") }
```
Not all if/else statements have to have an else clause. By default, if no else statement is given R does nothing.
```{r}
x <- 1000
if (x > 100) print("'x' is greater than 100")
```
If/else statements can also be nested:
```{r}
y <- 25
if (y < 100) {
if (y > 10) {
print("10 < y < 100")
} else {
print("y < 10 or y > 100")
}
} else {
print("y < 10 or y > 100")
}
```
Combining if/else statments
Another way to combine if/else statements is to combine the conditional statement. There are four operators for combining logical statements: &, &&, |, ||. The "and" operators (&/&&) return return TRUE if both statements are TRUE. The "or" operators (|/||) return TRUE if either statement is TRUE. The The single-character operators (& and |) return a vector.
```{r}
1 > 0 & TRUE
FALSE | 10 ## Remember from class 1 how 10 is coerced to TRUE
1 > 0 & c(TRUE, FALSE, FALSE, TRUE)
0 > 1 & c(TRUE, FALSE, FALSE, TRUE)
0 > 1 | c(TRUE, FALSE, FALSE, TRUE)
```
The double-character operators (&& and ||) will only return a single TRUE or FALSE value.
```{r}
1 > 0 && 10 < 100
1 > 0 && FALSE
1 > 0 || FALSE
1 > 0 && c(TRUE, FALSE)
1 > 0 && c(FALSE, TRUE)
```
Notice in the last two statements above the order of the vector matters. The double-character operators are lazy -- they only check as much as they need to. If you give a double-character operator a vector, it only checks the first element.
You can combine logical expressions within an if/else statement (recall we defined y as 25 in an earlier expression).
```{r}
if (y < 100 && y > 10) {
print("10 < y < 100")
} else {
print("y < 10 or y > 100")
}
summary(cars)
```
Formal Hypothesis Testing
We are using counts of ants, which are non-normally distributed, and we have multiple ant species to use as our "response" variables. We will use PERMANOVA to analyze our data. PERMANOVA is a Multivariate ANOVA with permutations, meant to test differences between groups like an ANOVA test, but with a lot of variables (ant species abundance). The permutations avoid possible biases. If the result is statistically significant, it  tells you that the distribution and abundances of the two groups are different.
First we'll need to install the package "vegan" to run the PERMANOVA.
```{r}
install.packages("vegan") 	## R will ask you which "CRAN mirror" you want to use.
## Select any of the "USA" options
library(vegan)	## Although you've installed 'vegan' you still need to tell R you
## want to use it in this session. Ignore 'warning' messages.
```
Go ahead and read your ant data file into R.
```{r}
ants <-read.csv('AntData.csv', header=TRUE)
```
Now, we are going to use if statements to sum ant abundances by species. We need to make sure there are no zeros in our data frame. Sum the abundance of each species. Then, we'll remove rows that only contain zeros (PERMANOVA won't run if there are rows or columns that contain only zeros). NOTE: there are more efficient ways to do this, this method is soley for learning purposes.
```{r}
if (ants$species == "C.pennsylvanicus") {
cpsub = ants[ants$species == "C.pennsylvanicus",]
}
sum(cpsub$abundance)
if (ants$species == "T.sessile") {
tssub = ants[ants$species == "T.sessile",]
}
sum(tssub$abundance)
if (ants$species == "C.ashmeadi") {
casub = ants[ants$species == "C.ashmeadi",]
}
sum(casub$abundance)
if (ants$species == "Pheidole") {
phsub = ants[ants$species == "Pheidole",]
}
sum(phsub$abundance)
if (ants$species == "M.minimum") {
phsub = ants[ants$species == "M.minimum",]
}
sum(phsub$abundance)
if (ants$species == "S.molesta") {
smsub = ants[ants$species == "S.molesta",]
}
sum(smsub$abundance)
if (ants$species == "F.pallidefulva") {
fpsub = ants[ants$species == "F.pallidefulva",]
}
sum(fpsub$abundance)
if (ants$species == "T.bicarinatum") {
tbsub = ants[ants$species == "T.bicarinatum",]
}
sum(tbsub$abundance)
```
In this example, there are no 0 sums so we don't need to filter out any rows.
Now, we're going to make a model to run the PERMANOVA test. First, name your response variable - for this analysis, it's the dataframe of our ant abundances (ant_abun). Then, specify your predictor variables (habitat, food type, section). We want to include section because there could be differences in ant abundance/species presence based on which section collected the data (think about why this might be the case). We are going to utilize 999 permutations in our model, this is a default setting.
```{r}
antmod = adonis(abundance ~ Habitat * Food + Section, data=ants, permutations=999)
antmod
```
We have R2 values and p-values (last two columns of output). Each R2 value corresponds to the amount of variation in the response variable that can be explained by the predictor variable.
Here are some questions to think about before writing your lab report:
What factors are significant predictors of ant abundance?
How do you know (which values do you use to determine this)?
Were we able to answer our research questions?
What percentage of variation is left unexplained (See 'Residuals')?
What other factors may influence our results that we haven't included in the study?
What do you think "Section" might really represent? (Hint: Are there other types of niche
partitioning that we haven't included in our study?)
How would you go about testing this in a future project?
kruskal.test(abundance ~ Habitat, data = ants)
kruskal.test(abundance ~ Habitat, data = antsdata)
kruskal.test(abundance ~ Habitat, data = antdata)
View(ants)
kruskal.test(na.omit(abundance) ~ Habitat, data = antdata)
kruskal.test(na.omit(abundance) ~ Habitat, data = ants)
kruskal.test(na.omit(abundance) ~ na.omit(Habitat), data = ants)
ants2 = na.omit(ants)
kruskal.test((abundance) ~ as.factor(Habitat), data = ants)
ants2018 <- read.csv("/Users/sheldontaylor/Desktop/section401antdata.csv", header = TRUE)
head(ants2018)
ants2018 <- read.csv("/Users/sheldontaylor/Desktop/section401antdata.csv", header = TRUE)
View(ants2018)
library(tidyr)
ants <- gather(ants2018, key = species, 2:81, value = abundance)
View(ants)
ants2018 <- read.csv("/Users/sheldontaylor/Desktop/section401antdata.csv", header = TRUE)
t(ants2018)
ants2018.1 <- t(ants2018)
View(ants2018)
View(ants2018.1)
head(ants2018)
head(ants2018.1)
ants <- gather(ants2018.1, key = species, 2:13, value = abundance)
ants2018.1 <- data.frame(ants2018.1)
ants <- gather(ants2018.1, key = species, 2:13, value = abundance)
head(ants)
ants <- gather(ants2018.1, key = species, 4:13, value = abundance)
head(ants)
View(ants)
View(ants2018.1)
ants2018 <- read.csv("/Users/sheldontaylor/Desktop/section401antdataT.csv", header = TRUE)
ants <- gather(ants2018, key = species, 2:81, value = abundance)
head(ants2018)
ants <- gather(ants2018, key = species, 5:14, value = abundance)
head(ants)
write.csv(ants, "ants.csv", row.names = FALSE)
getwd()
unique(ants$species)
10*4*4
10*4*4*5
getRversion()
