% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/run_timestep.r
\name{run_timestep}
\alias{run_timestep}
\title{Run simulation timestep}
\usage{
run_timestep(metacomm, land, species, gsad, d_kernel = NULL,
  v_kernel = NULL, imm_rate = NA, return_dead = F)
}
\arguments{
\item{metacomm}{(required) matrix of lists defining metacommunity
(as generated by \code{\link{populate_landscape}} or returned by
this function).}

\item{land}{(required) matrix or raster of habitat types defining
the landscape (as generated by \code{\link{make_landscape}})}

\item{species}{(required) array of species vital rates (as generated by
\code{\link{make_species}})}

\item{gsad}{(required) vector defining the global relative abundance of 
each species. Must be in the same order as \code{species}. 
Defaults to same abundance for all species.}

\item{d_kernel}{list defining the dispersal kernel of new propagules (see 
\code{\link{get_dispersal_vec}} for options). Passed to the \code{form} 
parameter in \code{\link{disperse}}. Defaults to Gaussian.}

\item{v_kernel}{list defining the dispersal kernel of previously established
individuals (see \code{\link{get_dispersal_vec}} for options). Passed to 
the \code{form} parameter in \code{\link{disperse}}. Defaults to Gaussian.}

\item{imm_rate}{immigration rate. Passed to the parameter \code{m} in
\code{\link{establish}}. Defaults to 0.}

\item{return_dead}{logical indicating whether a second metacommunity array
should be returned that shows which individuals dies during this timestep.
Used for calculating mortality and establishement rates. Defaults to 
\code{FALSE}.}
}
\value{
if \code{return_dead} is \code{FALSE}, then the function returns
a matrix of lists defining the metacommunity with the same 
	dimensions as \code{metacomm}, otherwise it returns a list containing 
	two metacommunity arrays- the first is the new metacommunity and the second
	is an array of logicals indicating whether each microsite was vacated
	(through death or movement) in this timestep.
}
\description{
Runs the simulation on a metacommunity for one timestep.
}
\details{
Given a metacommunity (\code{metacomm}, see 
\code{\link{populate_landscape}}), landscape (\code{land}, 
see \code{\link{make_landscape}}), species pool (\code{species}, see
\code{\link{make_species}}), and global species abundance distribution
(\code{gsad}), this function calls the main process functions 
(\code{\link{die}, \link{reproduce}, \link{disperse}, \link{establish}})
to progress a metacommunity through one simulation timestep. The order
of operations is as follows: 
\enumerate{
	\item \strong{Death} : Established individuals in each community experience
		probabilistic mortality according to species- and habitat-specific
		mortality rates provided in \code{species}. See \code{\link{die}}.
	\item \strong{Birth} : Established individuals in each community produce 
		propagules according to species- and habitat-specific birth rates
		provided in \code{species}. See \code{\link{reproduce}}.
	\item \strong{Dispersal} : New propagules from each community disperse 
		across the landscape (\code{land}) according to species-specific
		dispersal rates provided in \code{species}. The parameter 
		\code{d_kernel} specifies the dispersal kernel for new propagules.
		See \code{\link{disperse}}.
	\item \strong{Movement} : Established individuals in each community move
		from their current cell with species- and habitat-specific
		movement rates provided in \code{species}. The parameter 
		\code{v_kernel} specifies the dispersal kernel for previously
		established individuals. See \code{\link{disperse}}.
	\item \strong{Establishment} : Empty spaces in each community are colonized
		by either a migrant from outside the community with probability
		\code{imm_rate} or by an individual selected at random from the 
		pool of new propagules and moving individuals that 
		arrived in the cell. External migrants are chosen probabilistically
		from the relative abundances given in \code{gsad}. 
		See \code{\link{establish}}.
}
}
\seealso{
\code{\link{run_sim}} for running multiple timesteps of 
	the simulation.
}
